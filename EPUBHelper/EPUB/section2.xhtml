<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:epub="http://www.idpf.org/2007/ops">
   <head>
      <title>EPUB3 Helper</title>
      <meta name="DC.TITLE" content="EPUB3 Helper" />
      <meta name="DC.CREATOR" content="J. Tynan Burke" />
      <meta name="DC.FORMAT" content="EPUB3" />
      <link rel="stylesheet" type="text/css" href="css/stylesheet.css" />
      <link rel="stylesheet" type="text/css" href="css/bootstrap.css" />
      <script src="js/jqMin.js" type="text/javascript"></script>
      <script src="js/jqCycle.js" type="text/javascript"></script>
      <script type="text/javascript" src="js/script.js"></script>
      <script type="text/javascript" src="js/bootstrap.js"></script>
   </head>
   <body>
      <h1>Features and Best Practices</h1>

      <h1>Feature: Text highlighting</h1>
      <p>For documents such as plays (or anything else where you might want to make highlightable classes), code like 
      the following will implement that:</p>
      
      <p><code>&lt;div class="banquo"&gt; &lt;span class="highlighter"&gt;&lt;b&gt; BANQUO:&lt;/b&gt;&lt;/span&gt;
         &lt;p&gt;Do you not hope your children shall be kings?&lt;/p&gt;
         &lt;/div&gt;
         &lt;div class="macbeth"&gt; &lt;span class="highlighter"&gt;&lt;b&gt; MACBETH:&lt;/b&gt;&lt;/span&gt;
         &lt;p&gt;So foul and fair a day I have not seen.&lt;/p&gt;
         &lt;/div&gt;
         &lt;div class="banquo"&gt; &lt;span class="highlighter"&gt;&lt;b&gt; BANQUO:&lt;/b&gt;&lt;/span&gt;
         &lt;p&gt;Speak then to me, who neither beg nor fear your favours nor your hate.&lt;/p&gt;
         &lt;/div&gt;
         &lt;div class="macbeth"&gt; &lt;span class="highlighter"&gt;&lt;b&gt; MACBETH:&lt;/b&gt;&lt;/span&gt;         
         &lt;p&gt;This line, not by the bard, pads out this scene.&lt;/p&gt;
         &lt;/div&gt;</code></p>
      
      <p>The <code>span</code>s with class 'highlighter' surround the content that 
         I want to toggle the highlighting, in this case, the speaker's name, though 
         it can be arbitrary content and does not even need to be a <code>span</code>. 
         The way the javascript functions is by selecting the parent of the 'highlighter' 
         and toggling the background color of that element between white and yellow, as 
         well as every other element of its class. Here, the highlighters are changing 
         the background of the two <code>div</code> elements with classes <code>macbeth</code> 
         and <code>banquo</code>, respectively. It is important to note that the highlighter 
         element <b>must</b>, in the present configuration, be the <i>child</i> - not just 
         a <i>descendant</i> - of the element whose class you wish to highlight. Take 
         care, also, to ensure that the element whose class you wish to highlight only 
         has <i>one</i> class.
      </p>
      
      <p>If you'd like to give the line of dialogue a formatting class in addition to 
         the class-to-be-highlighted - if, for instance, you'd like something like 
         &lt;div class="banquo dialogue"&gt; - feel free to wrap &lt;div class="banquo"&gt; 
         in an extra div with the class of dialogue, or whatever you decide you'd like 
         to use.</p>
      
      <p>Click the characters' names to toggle highlighting on and off.</p>
      
      <div class="banquo"> <span class="highlighter"><b> BANQUO:</b></span>
         <p>Do you not hope your children shall be kings?</p>
      </div>
      
      <div class="macbeth"> <span class="highlighter"><b> MACBETH:</b></span>
         <p>So foul and fair a day I have not seen.</p>
      </div>
      
      <div class="banquo"> <span class="highlighter"><b> BANQUO:</b></span>
         <p>Speak then to me, who neither beg nor fear your favours nor your hate.</p>
      </div>
      
      <div class="macbeth"> <span class="highlighter"><b> MACBETH:</b></span>         
         <p>This line, not by the bard, pads out this scene.</p>
      </div>
      
      <h1>Feature: Quizzes:</h1>
      <p>Here's the code for this section:</p>
      
      <p><code>
         &lt;div class="quiz"&gt;
         &lt;div class="question"&gt;
         &lt;p&gt;What is two plus two?&lt;/p&gt;
         &lt;ul&gt;
         &lt;li&gt;&lt;button class="btn answer wrong"&gt;Two &lt;span class="explanation"&gt;(Too many twos!)&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;
         &lt;li&gt;&lt;button class="btn answer wrong"&gt;Three&lt;/button&gt;&lt;/li&gt;
         &lt;li&gt;&lt;button class="btn answer right"&gt;Four &lt;span class="explanation"&gt;(Four is also two &lt;i&gt;times&lt;/i&gt; two - or two squared!)&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;
         &lt;/ul&gt;
         &lt;/div&gt;
         &lt;/div&gt;
      </code></p>
      
      <p>Quizzes are fairly straightforward. First, let me say that the classes 
         of quiz and question are simply for CSS formatting purposes and are not part 
         of the interactive function (I've included formatting for quiz but not question in the stylesheet). 
         Now then: to make a quiz, simply mark each 
         possible answer with the class 'answer', and indicate whether it is right or wrong 
         with classes as shown above. If you'd like to provide an explanation that is 
         displayed after the answer is selected, simply give it the class 'explanation'. 
         Remember that this is a javascript implementation, so quizzes won't work on 
         readers that don't allow javascript!</p>
      
      <p>I've set up quizzes to 'fail nicely'. They are hidden in the CSS and then displayed in the javascript; 
      any device that doesn't support javascript will simply not show anything inside of a <code>quiz</code> element. 
      To customize this behavior, remove <code>display: none;</code> from the CSS for <code>quiz</code>; you'll then 
      have more flexibility in quiz behavior.</p>
         
      <p>If you're operating in this mode:</p>
         <ul>
            <li>If you want the explanations to be visible on devices that 
         don't support javascript, go into stylesheet.css and simply remove display: none; from the style for 
         <code>explanation</code>.</li>
            <li>If, on the other hand, you want to make sure the explanations stay hidden 
         on <i>every</i> reader and are only visible on javascript-enabled readers, you'll need to add 
               <code>style="display: none;"</code> to every explanation in-line.</li>
         </ul>
      <p>And so forth.</p>

      <p>Quiz results reset every time the user goes to a section of the book other than the one that contains the quiz. I use 'section' here to 
         refer to the XHTML documents that appear in the toc.ncx and toc.xhtml files. Those two files may have other names in other file packages, 
         but the names I've used here (as well as how they're described in content.opf) are EPUB3 conventions, if not strict requirements.</p>
      
      <div class="quiz">
         <h3>Quiz time!</h3>
         <div class="question">
            <p>What is two plus two?</p>
            <ul>
               <li><button class="btn answer wrong">Two <span class="explanation">(Too many twos!)</span></button></li>
               <li><button class="btn answer wrong">Three</button></li>
               <li><button class="btn answer right">Four <span class="explanation">(Four is also 
                  two <i>times</i> two - or two squared!)</span></button></li>
            </ul>
         </div>
      </div>


      <h1>Feature: 'Sliding' divs:</h1>
      
      <p>
         Consider a foreign language reading book, with the original text on one page, and vocabulary hints 
         on the facing page. This supplementary material is partially intended as a sort of crutch, somewhere 
         between making you work it out through context and looking it up in a dictionary. I have found it 
         to be a valuable learning method, with one notable shortfall - the desire to look at the vocabulary 
         page, at least for me, was often overwhelming, which undermined some of its educational value. Even 
         a fleeting glance at the vocabulary page would give me knowledge that would perhaps have been more 
         effective if earned through a bit more struggle. On an EPUB, you can hide this panel, making it visible 
         only on the reader's explicit request for assistance:
      </p>
      
      <p style="width: 90%; background-color: #ddd; padding-left: 20;">
         <span class="sliding slidIn">Hint
            <span class="sliderText"><b>Sohn am Ort</b> - the son in town
               <br/><b>Verkehr pflegte...</b> - to keep up contact...</span >
         </span>
         Dazu kam, dass meine Groszmutter nicht nur mit ihrem Sohn am Ort keinen regelmaeszigen Verkehr pflegte...
      </p>
      <br/><br/>
      
      <p>I've named these 'sliders'. Sliders come in four classes:</p>
      
      <p><code>
         &lt;span class="sliding slidIn"&gt;0
         &lt;span class="sliderText"&gt;sliding...&lt;/span &gt;
         &lt;/span&gt;
         
         &lt;span class="slidingSpan1 slidIn"&gt;1
         &lt;span class="sliderText"&gt;slidingSpan1...&lt;/span &gt;
         &lt;/span&gt;
         
         &lt;span class="slidingSpan2 slidIn"&gt;2
         &lt;span class="sliderText"&gt;slidingSpan2...&lt;/span &gt;
         &lt;/span&gt;
         
         &lt;span class="slidingSpan3 slidIn"&gt;3
         &lt;span class="sliderText"&gt;and slidingSpan3.&lt;/span &gt;
         &lt;/span&gt;
      </code></p>
      
      <p>
         These are of variable expanded widths, which is customizable in the CSS. They are visible by default, 
         and hidden on the load of the document in the javascript, which means that non-javascript-enabled readers 
         will simply show them as expanded. You can make a slider expanded by default by removing the 'slidIn' class. 
         Like quizzes, this is customizable in the same way; put display:none in the CSS and they'll be hidden in 
         non-javascript devices. If you do this, make sure to uncomment the 'javascript fix' section displaying 
         them in script.js.
      </p>
      
      <p>
         Please note that there is a very important semantic distinction to draw between these slider-classed 
         container elements and the <code>aside</code> element from HTML5. <code>aside</code> is rendered differently by 
         every e-reader - and sometimes not at all! But if you're looking to use footnotes and endnotes, you should 
         use the <code>aside</code> element to ensure proper indexing; these sliders are intended for more casual content, 
         or things like hints or annotations. For instance, if you are working with a text that references a painting, 
         an image of the painting can be included in a slider for those who haven't seen it, without interrupting 
         the flow of the text for those who have, and without removing any significant functionality for people with 
         older devices.
      </p>
      
      <p>
         For the record, <a href="http://www.idpf.org/accessibility/guidelines/content/xhtml/notes.php">here</a> 
         is how to implement references using the EPUB namespace and HTML5. 
      </p>
            
      <p>Note that the footnote linking doesn't work the same way on every reader, which is another advantage of sliders - 
         you don't have to leave the page. But any work that needs serious documentation should use standard citations.</p>
      

      <h1>Best practice: Movies</h1>
      <p>EPUB3 supports embedded movies. This is great for eductational and entertaining content. To ensure maximum 
      accessibility, one should follow the following conventions.</p>
      <p>The open-source movie format WebM is the prefered distribution format 
         for EPUB3. <code>ffmpeg</code> is a command-line tool that some 
         readers may recognize; a command like <code>ffmpeg -i origin.mp4 output.webm</code> 
         will do the conversion for you. The software packages VLC and Miro Converter 
         can also perform this conversion for you, and have the advantage of a graphical 
         interface. A Google search for 'webm converter' can also help you pick the right 
         program for your system. To ensure that your videos work on a variety of systems, 
         you can provide multiple <code>source</code> elements inside the <code>video</code> 
         element, as I have done here.</p>
      
      <p>mp4 and similar formats <i>will</i> function on, for instance, the iPad, 
         but this is not a recommended use of the standard, as the Readium SDK does 
         not have the best support for them. At the 
         very least, it is best to provide a webm-formatted video alongside whatever 
         your original formatting is. Please also note the <code>div</code> element with 
         the <code>class</code> "err"; this will be displayed in the event of the 
         hardware's inability to display your video file(s).</p>
      
      <p>Here's the source code for this example, followed by the example itself:</p>
      
      <p><code>
         &lt;video id="video1" controls="controls"&gt;
         &lt;source src="movieSample.mp4" type="video/mp4"/&gt;
         &lt;source src="movieSample.webm" type="video/webm"/&gt;
         &lt;div class="err"&gt;
         &lt;p&gt;
         Sorry, it appears your system 
         either does not support video 
         playback or cannot play the 
         MP4 and WebM formats provided.
         &lt;/p&gt;
         &lt;/div&gt;
         &lt;/video&gt;
      </code></p>
      <video id="video1" controls="controls">
         <source src="movies/movieSample.mp4" type="video/mp4"/>
         <source src="movies/movieSample.webm" type="video/webm"/>
         <div class="err">
            <p>
               Sorry, it appears your system 
               either does not support video 
               playback or cannot play the 
               MP4 and WebM formats provided.
            </p>
         </div>
      </video>
      
      <h1>Beta Feature: Slideshows &amp; transitions:</h1>
      <p>
         Also included is the jQuery Cycle plugin, making slideshows a snap. Please note that this works fine 
         in the Readium SDK, which is the gold standard, but devices like the iPad do not render it correctly.</p>
      
      <p>This HTML:
      </p>

      <p><code>
         &lt;div class="slideshow"&gt;
           &lt;img src="column-1.png" alt="Picture alt 1"/&gt;
           &lt;img src="column-2.png" alt="Picture alt 2"/&gt;
           &lt;img src="column-3.png" alt="Picture alt 3"/&gt;
         &lt;/div&gt;         
      </code></p>
      
      <p>
         And this javascript:
      </p>

      <p><code>
     $('.slideshow').cycle({
       fx: 'shuffle'       
       });
      </code></p>

      <p>
         Makes this slideshow, which uses some random graphics I made a while back:
      </p>
      <div class="slideshow">
            <img src="images/column-1.png" alt="Picture alt 1"/>
            <img src="images/column-2.png" alt="Picture alt 2"/>
            <img src="images/column-3.png" alt="Picture alt 3"/>
      </div>

      <p>
         ...giving you an easy way to liven up any text, particularly educational material. To make 
         a basic slideshow, all you need to do is put images inside of a div classed 'slideshow'. 
         Documentation for the jQuery Cycle plugin is <a href="http://jquery.malsup.com/cycle/">here</a>.
      </p>


      <h1>Beta feature: Bootstrap elements</h1>
      <p>
         This package contains the popular Bootstrap HTML5 library, which is produced under the Apache License 2.0 by 
         Twitter. Web developers familiar with the library will find that many of the features integrate well into 
         EPUB3. As a simple yet relevant example, the button classes I used in the quiz section provide friendly 
         and pleasant interface elements that go a long way towards modernizing the look of your eBook.
      </p>

      <p>
         Bootstrap also has powerful fixed-layout and dynamic-layout classes, which I demonstrate below. This is another 
         feature that works great on the Readium SDK but not so well on the iPad; see below for how to do columns 
         natively. In the meantime, here's an example (that might not look great for you):
      </p>


      <div class="container">
         <div class="row"> 
            <div class="span4"><p></p>
            </div>
            <div class="span4 offset1">
               <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent imperdiet metus sed risus tempor, vel rhoncus erat egestas. Etiam accumsan leo at rutrum semper. Praesent ipsum lectus, facilisis in suscipit vel, rutrum vitae ante. Praesent fringilla nec augue eu adipiscing. Ut nec nibh dui. Vestibulum cursus, sem sed fringilla gravida, velit risus vulputate odio, eu feugiat nibh libero nec enim. Duis dolor tortor, semper vel feugiat ac, pharetra in dui. Donec eget sagittis orci, eleifend sodales dolor. Fusce vel quam quam.
                  
               </p>
            </div>
            <div class="span2">
               <p>Nullam sagittis blandit volutpat. Ut nec erat eu elit luctus pellentesque. Aenean non turpis purus. Cras rhoncus, nulla eu pulvinar mollis, mauris orci mollis lorem, at ullamcorper tellus purus id ligula. Phasellus ullamcorper laoreet nisi in ultricies. Cras imperdiet molestie nibh sed dignissim. In hac habitasse platea dictumst.
                  
               </p>
            </div>
         </div>
         <div class="row">
            <div class="span12">
               <p><b>Let me again emphasize that I don't think this is always a good idea.</b> 
                  It looks great on Readium, but not so great on something like 
                  an iPad. Further, making a true fixed-layout document function on the iPad right now requires 
                  much more sophisticated coding than I'm providing here, 
                  and the standards for fixed layout will likely change, possibly significantly, in the coming few years. 
                  In the mean time, Bootstrap scaffolding can help bridge the gap in situations where such a 
                  requirement is unavoidable.</p>
            </div>
         </div>
      </div>
      
      <p>I leave it to the enterprising developer to figure out other ways of integrating Bootstrap materials into 
      the EPUB3 framework.</p>
      

      <h1>Best practice: Columns</h1>

      <p>EPUB3 adheres to the <a href="http://www.w3.org/TR/css3-multicol/">W3C Recommendation</a> for CSS-based 
      column layout. It also carries a warning not to rely on multi-column layout, because of things like the above 
      behavioral gap between Apple readers and Readium. In reality, the 'best practice' for columns in EPUB3 may be 
      no practice; just avoid them.</p>
      


   </body>
</html>
